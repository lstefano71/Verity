name: Create Release

# This workflow runs on any push to the main branch or any branch starting with "feature/"
on:
  push:
    branches:
      - main
      - 'feature/**'

jobs:
  build-and-release:
    # Use a Windows virtual machine to run the job
    runs-on: windows-latest

    permissions:
      contents: write # This is required to create releases and tags

    steps:
      # Step 1: Check out the repository's code
      # fetch-depth: 0 is CRITICAL for Nerdbank.GitVersioning to get the full commit history.
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Set up the .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x' # Use an SDK version compatible with your project

      # Step 3: Install the NBGV command-line tool (as requested, not pre-installed)
      - name: Install Nerdbank.GitVersioning tool
        run: dotnet tool install -g nbgv

      - name: restore dependencies
        run: dotnet tool restore

      # Step 4: Run the Cake build script to compile and package the application
      # The script will create the zip file in the ./artifacts directory
      - name: Run Cake build and package
        run: dotnet cake --target=Package --configuration=Release

      # Step 5: Get the version number for the release tag
      - name: Get Release Version
        id: get_version
        run: echo "TAG_NAME=v$(nbgv get-version -v NuGetPackageVersion)" >> $env:GITHUB_OUTPUT
        shell: pwsh

      # Step 6: Find the path of the created zip file
      # The name is dynamic, so we find it with a wildcard.
      - name: Get Artifact Path
        id: get_artifact
        run: echo "ARTIFACT_PATH=$(Get-ChildItem ./artifacts/*.zip | Select-Object -First 1 -ExpandProperty FullName)" >> $env:GITHUB_OUTPUT
        shell: pwsh
        
      # Step 7: Generate the release notes from the commit messages
      - name: Generate Changelog
        id: changelog
        uses: orhun/git-cliff-action@v3
        with:
          # Use the configuration file we created
          config: cliff.toml
          # Get commits between the previous tag and the latest commit
          args: --latest --strip header
        # The 'changelog' output from this action is now clean and multiline                    

        # Step 8: Create the GitHub Release and upload the artifact
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.TAG_NAME }}
          name: Release ${{ steps.get_version.outputs.TAG_NAME }}
          # Feed the clean, multiline changelog from the previous step
          body: ${{ steps.changelog.outputs.changelog }}
          files: ${{ steps.get_artifact.outputs.ARTIFACT_PATH }}
          prerelease: ${{ startsWith(github.ref, 'refs/heads/feature/') }}
